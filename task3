import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm

# Load the dataset
advertising = pd.read_csv("/content/advertising.csv")

# Inspect the dataset
print("Dataset Head:\n", advertising.head())
print("\nDataset Shape:", advertising.shape)
print("\nDataset Information:")
advertising.info()
print("\nDataset Description:\n", advertising.describe())

# Check for null values
print("\nPercentage of Missing Values:\n", advertising.isnull().sum() * 100 / advertising.shape[0])

# Outlier Analysis
fig, axs = plt.subplots(3, figsize=(8, 8))
sns.boxplot(advertising['TV'], ax=axs[0])
axs[0].set_title("TV Outliers")
sns.boxplot(advertising['Newspaper'], ax=axs[1])
axs[1].set_title("Newspaper Outliers")
sns.boxplot(advertising['Radio'], ax=axs[2])
axs[2].set_title("Radio Outliers")
plt.tight_layout()
plt.show()

sns.boxplot(advertising['Sales']).set_title("Sales Outliers")
plt.show()

# Pairplot to visualize relationships
sns.pairplot(advertising, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')
plt.suptitle("Scatterplots of Features vs Sales", y=1.02)
plt.show()

# Correlation heatmap
sns.heatmap(advertising.corr(), cmap="YlGnBu", annot=True)
plt.title("Correlation Heatmap")
plt.show()

# Define features and target variable
X = advertising['TV']
y = advertising['Sales']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)

# Display training data
print("\nTraining Data Head:\n", X_train.head())
print("\nTraining Target Head:\n", y_train.head())

# Add a constant for the intercept
X_train_sm = sm.add_constant(X_train)

# Fit the regression line using OLS
lr = sm.OLS(y_train, X_train_sm).fit()

# Display regression parameters
print("\nRegression Parameters:\n", lr.params)
print("\nOLS Regression Summary:\n")
print(lr.summary())

# Plot regression line
plt.scatter(X_train, y_train, label="Data")
plt.plot(X_train, lr.params[0] + lr.params[1] * X_train, 'r', label="Regression Line")
plt.title("Regression Line - Training Data")
plt.xlabel("TV")
plt.ylabel("Sales")
plt.legend()
plt.show()

# Residual analysis
y_train_pred = lr.predict(X_train_sm)
residuals = y_train - y_train_pred

fig = plt.figure()
sns.histplot(residuals, bins=15, kde=True)
plt.title("Distribution of Residuals")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.show()

plt.scatter(X_train, residuals)
plt.axhline(0, color='red', linestyle='--')
plt.title("Residuals vs TV")
plt.xlabel("TV")
plt.ylabel("Residuals")
plt.show()

# Test set predictions
X_test_sm = sm.add_constant(X_test)
y_pred = lr.predict(X_test_sm)

# Display test predictions
print("\nTest Predictions Head:\n", y_pred.head())

# Model evaluation
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r_squared = r2_score(y_test, y_pred)
print(f"\nRMSE: {rmse:.2f}")
print(f"R-squared: {r_squared:.2f}")

# Plot test predictions vs actual values
plt.scatter(X_test, y_test, label="Actual Data")
plt.plot(X_test, lr.params[0] + lr.params[1] * X_test, 'r', label="Regression Line")
plt.title("Regression Line - Test Data")
plt.xlabel("TV")
plt.ylabel("Sales")
plt.legend()
plt.show()
